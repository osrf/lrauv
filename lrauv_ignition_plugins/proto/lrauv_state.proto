/*
 * Copyright (C) 2021 Open Source Robotics Foundation
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

/*
 * Development of this module has been funded by the Monterey Bay Aquarium
 * Research Institute (MBARI) and the David and Lucile Packard Foundation
 */

syntax = "proto3";
package lrauv_ignition_plugins.msgs;
option java_package = "lrauv_ignition_plugins.msgs";
option java_outer_classname = "LRAUVStateProtos";

/// \ingroup lrauv_ignition_plugins.msgs
/// \interface LRAUVState
/// \brief Aggregated information about the LRAUV and the world

import "ignition/msgs/header.proto";
import "ignition/msgs/vector3d.proto";

// Mirrors SimResultStruct
// Note coordinate frame convention for all pose fields:
//   FSK (x fore or forward, y starboard or right, z keel or down)
message LRAUVState
{
  /// \brief Optional header data
  ignition.msgs.Header header     = 1;

  int32 errorPad_                 = 2;
  int32 utmZone_                  = 3;
  int32 northernHemi_             = 4;
  float propOmega_                = 5;
  float propThrust_               = 6;
  float propTorque_               = 7;
  float rudderAngle_              = 8;  // Angle that the rudder joint is
                                        // currently at. Unit: radians.
                                        // Higher values have the vertical fins
                                        // rotated more clockwise when looking
                                        // from the top (i.e. to starboard)
  float elevatorAngle_            = 9;
  float massPosition_             = 10;  // Position of the battery's joint.
                                         // Unit: meters. Positive values have
                                         // the battery forward, tilting the
                                         // nose downward.
  float buoyancyPosition_         = 11;  // Volume of the VBS. Unit: cubic
                                         // meters. Volumes higher than the
                                         // neutral volume push the vehicle
                                         // upwards.
  float depth_                    = 12;

  ignition.msgs.Vector3d rph_     = 13;  // roll_, pitch_, heading_ in SimResultStruct (rad)

  float speed_                    = 14;
  double latitudeDeg_             = 15;
  double longitudeDeg_            = 16;
  float netBuoy_                  = 17;  // Net buoyancy forces applied to the
                                         // vehicle. Unit: Newtons. Currently
                                         // not populated.

  ignition.msgs.Vector3d force_   = 18;  // forceX_, forceY_, forceZ_ in SimResultStruct
  ignition.msgs.Vector3d pos_     = 19;  // posX_, posY_, posZ_ in SimResultStruct
  ignition.msgs.Vector3d posRPH_  = 20;  // posRoll_, posPitch_, posHeading_ in SimResultStruct
  ignition.msgs.Vector3d posDot_  = 21;  // posXDot_, posYDot_, posZDot_ in SimResultStruct
                                         // Velocity wrt ground
  ignition.msgs.Vector3d rateUVW_ = 22;  // rateU_, rateV_, rateW_ in SimResultStruct
                                         // Water velocity
  ignition.msgs.Vector3d ratePQR_ = 23;  // rateP_, rateQ_, rateR_ in SimResultStruct
                                         // for roll, pitch, yaw rates, respectively

  float northCurrent_             = 24;  // +Y velocity in m / s
  float eastCurrent_              = 25;  // +X velocity in m / s
  float vertCurrent_              = 26;  // +Z velocity in m / s
  float magneticVariation_        = 27;
  float soundSpeed_               = 28;
  float temperature_              = 29;  // Celsius
  float salinity_                 = 30;  // PSU
  float density_                  = 31;
  repeated float values_          = 32;  // Size 4 (0: chlorophyll in ug / L, 1: pressure in Pa)
}
